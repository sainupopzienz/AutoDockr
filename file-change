import React, { useState } from 'react';
import { FileCode, Copy, Download, Plus, Trash2, Settings } from 'lucide-react';

interface DockerfileGeneratorProps {
  addToHistory: (command: string) => void;
}

const DockerfileGenerator: React.FC<DockerfileGeneratorProps> = ({ addToHistory }) => {
  const [projectType, setProjectType] = useState('node');
  const [baseImage, setBaseImage] = useState('node:18-alpine');
  const [workdir, setWorkdir] = useState('/app');
  const [port, setPort] = useState('3000');
  const [startCommand, setStartCommand] = useState('npm start');
  const [buildCommands, setBuildCommands] = useState<string[]>(['npm install']);
  const [copyCommands, setCopyCommands] = useState<{ source: string; dest: string }[]>([
    { source: 'package*.json', dest: './' },
    { source: '.', dest: './' },
  ]);
  const [environmentVars, setEnvironmentVars] = useState<{ key: string; value: string }[]>([]);
  const [runCommands, setRunCommands] = useState<string[]>([]);
  const [customInstructions, setCustomInstructions] = useState('');

  const projectTemplates = {
    node: {
      baseImage: 'node:18-alpine',
      workdir: '/app',
      port: '3000',
      startCommand: 'npm start',
      buildCommands: ['npm install'],
      copyCommands: [
        { source: 'package*.json', dest: './' },
        { source: '.', dest: './' },
      ],
      runCommands: ['apk add --no-cache dumb-init'],
      environmentVars: [{ key: 'NODE_ENV', value: 'production' }],
    },
    // other templates...
    'react-nginx': {
      baseImage: 'node:18-alpine as build',
      workdir: '/app',
      port: '80',
      startCommand: 'nginx -g "daemon off;"',
      buildCommands: ['npm install', 'npm run build'],
      copyCommands: [
        { source: 'package*.json', dest: './' },
        { source: '.', dest: './' },
      ],
      runCommands: [], // handled via multi-stage logic
      environmentVars: [],
    },
  } as const;

  const handleTemplateChange = (template: string) => {
    setProjectType(template);
    const config = (projectTemplates as any)[template];
    if (config) {
      setBaseImage(config.baseImage);
      setWorkdir(config.workdir);
      setPort(config.port);
      setStartCommand(config.startCommand);
      setBuildCommands(config.buildCommands);
      setCopyCommands(config.copyCommands);
      setRunCommands(config.runCommands);
      setEnvironmentVars(config.environmentVars);
    }
  };

  // Handlers for adding/updating/removing fields omitted for brevity

  const generateDockerfile = () => {
    // Special multi-stage for React+Nginx
    if (projectType === 'react-nginx') {
      return `# Generated Dockerfile for React (Production with Nginx)\n# Created by Docker Advanced UI\n\n` +
        `FROM ${baseImage}\n` +
        `WORKDIR ${workdir}\n` +
        `${copyCommands.map(c => `COPY ${c.source} ${c.dest}`).join('\n')}\n` +
        `${buildCommands.map(cmd => `RUN ${cmd}`).join('\n')}\n\n` +
        `FROM nginx:alpine\n` +
        `WORKDIR /usr/share/nginx/html\n` +
        `COPY --from=build /app/build /usr/share/nginx/html\n` +
        `COPY nginx.conf /etc/nginx/nginx.conf\n` +
        `EXPOSE ${port}\n` +
        `CMD ["nginx","-g","daemon off;"]\n`;
    }

    // Default single-stage
    const parts: string[] = [];
    parts.push(`# Generated Dockerfile for ${projectType.toUpperCase()} application`);
    parts.push('# Created by Docker Advanced UI');
    parts.push('');
    parts.push(`FROM ${baseImage}`);
    parts.push(`WORKDIR ${workdir}`);
    parts.push('');

    runCommands.forEach(cmd => {
      const t = cmd.trim();
      if (!t) return;
      if (/^(FROM|COPY|ADD|ENV|EXPOSE|CMD)/.test(t)) {
        parts.push(t);
      } else {
        parts.push(`RUN ${t}`);
      }
    });

    copyCommands.forEach(({ source, dest }) => {
      parts.push(`COPY ${source} ${dest}`);
    });

    buildCommands.forEach(cmd => {
      const t = cmd.trim();
      if (t) parts.push(`RUN ${t}`);
    });

    environmentVars.forEach(env => {
      if (env.key && env.value) {
        parts.push(`ENV ${env.key}=${env.value}`);
      }
    });

    if (port) parts.push(`EXPOSE ${port}`);

    if (customInstructions.trim()) {
      parts.push('# Custom instructions');
      parts.push(customInstructions.trim());
    }

    const [cmd, ...args] = startCommand.split(' ');
    const cmdArgs = [cmd, ...args].map(a => `"${a}"`).join(', ');
    parts.push(`CMD [${cmdArgs}]`);

    return parts.join('\n') + '\n';
  };

  // generateDockerCompose, copyToClipboard, downloadFile, and JSX unchanged

  return <div>{/* UI unchanged */}</div>;
};

export default DockerfileGenerator;
